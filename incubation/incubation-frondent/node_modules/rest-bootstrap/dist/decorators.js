"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Header = exports.Query = exports.Body = exports.Param = exports.Res = exports.Req = exports.Options = exports.Delete = exports.Patch = exports.Put = exports.Post = exports.Get = exports.Controller = exports.Middleware = exports.Injectable = exports.Service = void 0;
require("reflect-metadata");
const RequestMethod_1 = require("./enums/RequestMethod");
const addRoute = (target, property, requestMethod, path) => {
    let routes = Reflect.getMetadata('routes', target.constructor);
    if (!routes) {
        routes = [];
    }
    const existingRoute = routes.find(route => route.handler === property);
    if (existingRoute) {
        existingRoute.requestMethod = requestMethod;
        existingRoute.path = path;
        existingRoute.handler = property;
    }
    else {
        routes.push({
            requestMethod,
            path,
            handler: property,
            middleware: [],
        });
    }
    Reflect.defineMetadata('routes', routes, target.constructor);
};
const addMiddleware = (target, property, ...middleware) => {
    let routes = Reflect.getMetadata('routes', target.constructor);
    if (!routes) {
        routes = [];
    }
    const existingRoute = routes.find(route => route.handler === property);
    if (existingRoute) {
        if (!existingRoute.middleware) {
            existingRoute.middleware = [];
        }
        existingRoute.middleware.push(...middleware);
    }
    else {
        routes.push({
            handler: property,
            middleware,
        });
    }
    Reflect.defineMetadata('routes', routes, target.constructor);
};
const addParam = (target, property, index, type, name) => {
    const params = Reflect.getOwnMetadata('params', target, property) || [];
    params.push({
        index,
        type,
        name,
    });
    params.sort((a, b) => a.index - b.index);
    Reflect.defineMetadata('params', params, target, property);
};
exports.Service = () => {
    return (target) => {
        //
    };
};
exports.Injectable = () => {
    return (target) => {
        //
    };
};
exports.Middleware = (...middleware) => {
    return (target, property) => {
        addMiddleware(target, property, ...middleware);
    };
};
exports.Controller = (prefix = '') => {
    return (target) => {
        Reflect.defineMetadata('prefix', prefix, target);
    };
};
exports.Get = (path) => {
    return (target, property) => {
        addRoute(target, property, RequestMethod_1.RequestMethod.Get, path);
    };
};
exports.Post = (path) => {
    return (target, property) => {
        addRoute(target, property, RequestMethod_1.RequestMethod.Post, path);
    };
};
exports.Put = (path) => {
    return (target, property) => {
        addRoute(target, property, RequestMethod_1.RequestMethod.Put, path);
    };
};
exports.Patch = (path) => {
    return (target, property) => {
        addRoute(target, property, RequestMethod_1.RequestMethod.Patch, path);
    };
};
exports.Delete = (path) => {
    return (target, property) => {
        addRoute(target, property, RequestMethod_1.RequestMethod.Delete, path);
    };
};
exports.Options = (path) => {
    return (target, property) => {
        addRoute(target, property, RequestMethod_1.RequestMethod.Options, path);
    };
};
exports.Req = (target, property, index) => {
    addParam(target, property, index, 'request');
};
exports.Res = (target, property, index) => {
    addParam(target, property, index, 'response');
};
exports.Param = (param) => {
    return (target, property, index) => {
        addParam(target, property, index, 'param', param);
    };
};
exports.Body = (param) => {
    return (target, property, index) => {
        addParam(target, property, index, 'body', param);
    };
};
exports.Query = (param) => {
    return (target, property, index) => {
        addParam(target, property, index, 'query', param);
    };
};
exports.Header = (param) => {
    return (target, property, index) => {
        addParam(target, property, index, 'header', param);
    };
};
//# sourceMappingURL=decorators.js.map