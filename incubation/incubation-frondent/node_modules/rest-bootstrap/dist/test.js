"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const _1 = require(".");
const decorators_1 = require("./decorators");
const UnauthorizedError_1 = require("./errors/UnauthorizedError");
let LogQuery = class LogQuery {
    constructor() {
        this.message = 'hello';
    }
    handle(req, res, next) {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                const messages = req.messages || [];
                messages.push(this.message);
                req.messages = messages;
                console.log('a', Date.now());
                next();
            }, 1000);
        });
    }
};
LogQuery = __decorate([
    decorators_1.Injectable()
], LogQuery);
class PrintQuery {
    constructor() {
        this.message = 'world';
    }
    handle(req, res, next) {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                const messages = req.messages || [];
                messages.push(this.message);
                req.messages = messages;
                console.log('b', Date.now());
                next();
            }, 100);
        });
    }
}
class SendQuery {
    constructor() {
        this.message = 'go away';
    }
    handle(req, res, next) {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                const messages = req.messages || [];
                messages.push(this.message);
                req.messages = messages;
                console.log('c', Date.now());
                next();
            }, 3000);
        });
    }
}
let TestController = class TestController {
    getIndex(request) {
        throw new UnauthorizedError_1.UnauthorizedError('dink nx');
    }
};
__decorate([
    decorators_1.Get('/a'),
    __param(0, decorators_1.Req),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], TestController.prototype, "getIndex", null);
TestController = __decorate([
    decorators_1.Controller('/test')
], TestController);
class ErrHandler {
    handle(error, req, res, next) {
        res.send(error.message + '----');
    }
}
class App {
    constructor() {
        this.middleware = [];
        this.controllers = [
            TestController,
        ];
        this.errorHandler = ErrHandler;
    }
}
_1.serve(App, 8000);
//# sourceMappingURL=test.js.map